{"version":3,"sources":["components/projectSingle/SearchProject.tsx","components/projectSingle/ProjectInput.tsx","components/projectReport/webdatarocks/webdatarocks.react.tsx","components/SourcingDoc.tsx","components/Uploader.tsx","components/About.tsx","components/QuickSearch.tsx","routes.tsx","components/projectReport/ProjectReport.tsx","components/Main.tsx","components/Header.tsx","components/Sidebar.tsx","App.tsx","index.tsx"],"names":["SearchProject","props","searchProject","useState","open","setOpen","projectID","setProjectID","Dialog","onClose","DialogTitle","DialogContent","TextField","label","autoFocus","required","onChange","event","value","target","DialogActions","Button","onClick","color","useStyles","makeStyles","theme","createStyles","textfield_basic","margin","spacing","width","textfield_small","divider_basic","divider_small","subtitle","subtitle_part","button","initPart","part","part_description","usage","target_price","target_invest","sourcing_date","t1_date","t2_date","t3_date","pv_date","ppap_date","project","initProject","product_group","project_name","customer","car","mdb_status","project_status","dd_location","production_line","fg_part_number","production_cycle_time","budget_available","sop_hella_date","run_rate_hella_date","pv_hella_date","sop_customer_date","pjm","pur","md","controlling","sqa","logistic","me","volume_list","Array","fill","part_list","Pivot","webdatarocks","this","Webdatarocks","container","ReactDOM","findDOMNode","dispose","React","Component","formControl","url","document","domain","About","Grid","item","xs","Link","href","textfield_large","title","table","minWidth","maxWidth","initSearch","category","keyword","result","fields","rows","pages","path","name","icon","component","classes","search","setSearch","selectCategory","map","option","key","MenuItem","handleChange","fetchResult","url_string","axios","method","params","then","res","console","log","JSON","stringify","data","catch","err","tableHead","field","TableCell","align","tableBody","row","row_id","TableRow","cell","cell_id","scope","Typography","className","variant","select","onKeyPress","preventDefault","TableContainer","Paper","Table","aria-label","TableHead","TableBody","setProject","handleChange_normalTextField","handleChange_volumeTextField","clone_list","parseInt","handleChange_Part","id","index","clone_part","parse","clone_part_list","SelectMaker","options","select_MDB","select_project_status","select_BudgetAvailable","TextFieldList_Basic","selectItem","type","TextFieldList_Timing","TextFieldList_Team","TextFieldList_Part","ElementListMaker_TextField","TextFieldList","textField","substring","InputLabelProps","shrink","undefined","ElementList_TextField_Basic","ElementList_TextField_Team","ElementList_DateTextField_Project","ElementList_NumTextField_Volume","num","toString","ElementListCombi_Part","Box","bgcolor","p","part_index","textField_Part","propName","targetPart","ButtonGroup_Lifetime","ButtonGroup","size","new_volume_list","pop","push","ButtonGroup_Part","new_part_list","copy_part","set_project_with_response","noValidate","autoComplete","response","Divider","display","justify","startIcon","ref","useRef","toolbar","reportcomplete","current","off","report","initSource","vendor_available","vendor_selected","part_selected","part_available","file_selected","source","setSource","fetchVendor","length","get","selectOption_file","selectOption_vendor","MenuProps","PaperProps","style","maxHeight","ITEM_HEIGHT","onBlur","concat","fetchPart_Project","disabled","vendor","FormControl","InputLabel","Select","multiple","input","Input","renderValue","selected","join","Checkbox","checked","indexOf","ListItemText","primary","file","filename","url_download","link","createElement","body","appendChild","click","remove","msg","setMsg","action","headers","authorization","info","status","appBarSpacer","mixins","content","flexGrow","height","overflow","paddingTop","paddingBottom","paper","padding","flexDirection","switchPages","exact","Main","Container","lg","Header","AppBar","position","appBar","Toolbar","itemList","ListItem","ListItemIcon","Sidebar","Drawer","drawer","drawerPaper","root","zIndex","flexShrink","render","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.cb2b9558.chunk.js","sourcesContent":["import React, {ChangeEvent, Fragment, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n// what is the props' type\n// interface SearchProjectProps\n\nexport const SearchProject = (props:any) => {\n\n    const searchProject = props.searchProject\n\n    const [open, setOpen] = useState(true)\n    const [projectID, setProjectID] = useState(\"\")\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const {value} = event.target\n        setProjectID(value)\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const handleClick_searchProject = () => {\n        searchProject(projectID)\n        setOpen(false)\n    };\n\n\n    return (\n        <Fragment>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle>Enter Project ID</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        label=\"Project ID\"\n                        autoFocus\n                        required={true}\n                        onChange={handleChange}\n                        value={projectID}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick_searchProject} color=\"secondary\">\n                        Search\n                    </Button>\n                    <Button onClick={()=>setOpen(false)} color=\"inherit\">\n                        Create New\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Fragment>\n    );\n}","import React, {ChangeEvent, Fragment, ReactElement, useState} from 'react';\nimport axios from 'axios';\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\nimport {\n    MenuItem,\n    Typography,\n    Divider,\n    Button,\n    ButtonGroup, Box\n} from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {Grid, TextField} from \"@material-ui/core\";\nimport {SearchProject} from \"./SearchProject\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textfield_basic: {\n            margin: theme.spacing(1, 3),\n            width: 200,\n        },\n        textfield_small: {\n            margin: theme.spacing(1, 3),\n            width: 100,\n        },\n        divider_basic: {\n            margin: theme.spacing(5, 2),\n        },\n        divider_small: {\n            margin: theme.spacing(1, 2),\n        },\n        subtitle: {\n            margin: theme.spacing(0, 3),\n        },\n        subtitle_part: {\n            margin: theme.spacing(3, 3),\n        },\n        button: {\n            margin: theme.spacing(5, 3),\n        }\n    }),\n);\n\n\n// interface ProjectSingleProps extends RouteComponentProps {\n// }\n\n\n// props to control each input element\ntype TextFieldProps = {\n    id?: number\n    name: string\n    label: string\n    required?: boolean\n    select?: boolean\n    type?: string\n    selectItem?: ReactElement[]\n    value?: string | number | boolean\n}\n\ntype Part = {\n    part: string\n    part_description: string\n    usage: number | string\n    target_price: number | string\n    target_invest: number | string\n    sourcing_date: string\n    t1_date: string\n    t2_date: string\n    t3_date: string\n    pv_date: string\n    ppap_date: string\n    project: string\n    [propName: string]: string | number // [propName:string] string here means: all fields are string?\n    // [propName: number]: string | number | null\n\n}\n\n// use to store name:value tuple between server and view. Name it \"project\" object.\n// all these fields/keys are mandatory\ntype ProjectProps = {\n    product_group: string\n    project_name: string\n    customer: string\n    car: string\n    mdb_status: string\n    project_status: string\n    project: string\n    dd_location: string\n    production_line: string\n    fg_part_number: string\n    production_cycle_time: number | string\n    budget_available: string\n\n    // timing\n    sop_hella_date: string\n    run_rate_hella_date: string\n    pv_hella_date: string\n    sop_customer_date: string\n\n    // team\n    pjm: string\n    pur: string\n    md: string\n    controlling: string\n    sqa: string\n    logistic: string\n    me: string\n\n    // volume\n    volume_list: (number | string)[]\n\n    // parts\n    part_list: Part[]\n}\n\nconst initPart: Part = {\n    part: \"\",\n    part_description: \"\",\n    usage: \"\",\n    target_price: \"\",\n    target_invest: \"\",\n    sourcing_date: \"\",\n    t1_date: \"\",\n    t2_date: \"\",\n    t3_date: \"\",\n    pv_date: \"\",\n    ppap_date: \"\",\n    project: \"\",\n}\n\n\nconst initProject: ProjectProps = {\n    product_group: \"\",\n    project_name: \"\",\n    customer: \"\",\n    car: \"\",\n    mdb_status: \"\",\n    project_status: \"\",\n    project: \"\",\n    dd_location: \"\",\n    production_line: \"\",\n    fg_part_number: \"\",\n    production_cycle_time: \"\",\n    budget_available: \"\",\n\n    // timing\n    sop_hella_date: \"\",\n    run_rate_hella_date: \"\",\n    pv_hella_date: \"\",\n    sop_customer_date: \"\",\n\n    // team\n    pjm: \"\",\n    pur: \"\",\n    md: \"\",\n    controlling: \"\",\n    sqa: \"\",\n    logistic: \"\",\n    me: \"\",\n\n    // volume\n    volume_list: Array(3).fill(\"\"),\n\n    // part\n    part_list: [initPart],\n}\n\n\nexport const ProjectInput = () => {\n\n    const classes = useStyles();\n\n    const [project, setProject] = useState(initProject)\n\n    // ============= change handler function ==========\n    // normal TextField handler\n    const handleChange_normalTextField = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const {name, value} = event.target\n        console.log(`[handle input change]: name=${name}, value=${value}`)\n        setProject({\n            ...project,\n            [name]: value\n        })\n        console.log(`[handle input change]: now project info is ${JSON.stringify(project)}`)\n    }\n\n    // volume list handler\n    const handleChange_volumeTextField = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name, value} = event.target //use name(same as key) as index for searching in volume list. Deep clone.\n        let clone_list: (number | string)[] = [...project.volume_list]\n        clone_list[parseInt(name)] = parseInt(value)\n        setProject({\n            ...project,\n            volume_list: clone_list\n        })\n    }\n\n    //TODO limit the input that project/part is not null\n\n    // handle part value update\n    const handleChange_Part = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name, value, id} = event.target\n        // console.log(`>>> part input name is: ${name}`)\n        // console.log(`>>> part input value is: ${value}`)\n        // console.log(`>>> part input id is: ${id}`)\n        const index = parseInt(id)\n        //use id(same as key) as index for part searching in part list. Deep clone.\n        let clone_part = JSON.parse(JSON.stringify(project.part_list[index]))\n        // console.log(`>>> clone part is: ${JSON.stringify(clone_part)}`)\n\n        // use name to update the target attribute\n        clone_part[name] = value\n        // deep clone the whole part_list\n        let clone_part_list = JSON.parse(JSON.stringify(project.part_list))\n        // replace the part in clone_part_list with clone_part\n        clone_part_list[index] = clone_part\n        // console.log(`>>> clone part value is: ${clone_part}`)\n        // replace the real part_list with clone_part_list\n        setProject({\n            ...project,\n            part_list: clone_part_list\n        })\n    }\n\n    // add year handler\n    const handleClick_addYear = () => {\n        let new_volume_list = [...project.volume_list]\n        new_volume_list.push(\"\")\n        setProject({\n            ...project,\n            volume_list: new_volume_list\n        })\n    }\n\n    // remove year handler\n    const handleClick_removeYear = () => {\n        let new_volume_list = [...project.volume_list]\n        new_volume_list.pop()\n        setProject({\n            ...project,\n            volume_list: new_volume_list\n        })\n    }\n\n    // add part handler\n    const handleClick_addPart = () => {\n        // deep clone a new part\n        const copy_part = JSON.parse(JSON.stringify(initPart))\n        // deep clone the new part list\n        let new_part_list = JSON.parse(JSON.stringify(project.part_list))\n        new_part_list.push(copy_part)\n\n        setProject({\n            ...project,\n            part_list: new_part_list\n        })\n    }\n\n    // remove part handler\n    const handleClick_removePart = () => {\n        // deep clone a new part list\n        let new_part_list = JSON.parse(JSON.stringify(project.part_list))\n        // pop out the last one\n        new_part_list.pop()\n        setProject({\n            ...project,\n            part_list: new_part_list\n        })\n    }\n\n\n    // =========== data preparing ============\n\n    // Selector Option for MDB status\n    const option_MDB: string[] = [\n        \"New\",\n        \"Can\",\n        \"Must\",\n        \"ORDER\",\n        \"No Go\",\n    ]\n\n    const option_project_status: string[] = [\n        \"Acquisition\",\n        \"Nomination\",\n        \"Lost\",\n        \"On Hold\",\n        \"OtD\",\n        \"TtM\",\n    ]\n\n    const option_BudgetAvailable: string[] = [\n        \"Available\",\n        \"Not Yet\"\n    ]\n\n\n    const SelectMaker = (options: string[]) =>\n        options.map(\n            (option: string, key: number) =>\n                <MenuItem key={key} value={option}>\n                    {option}\n                </MenuItem>\n        )\n\n    const select_MDB = SelectMaker(option_MDB)\n    const select_project_status = SelectMaker(option_project_status)\n    const select_BudgetAvailable = SelectMaker(option_BudgetAvailable)\n\n\n// Behaviour Setting of Input TextField\n    const TextFieldList_Basic: TextFieldProps[] = [\n        {\n            name: \"project\",\n            label: \"Project No.\",\n            value: project.project\n        },\n        {\n            name: \"project_name\",\n            label: \"Project Name\",\n            required: true,\n            value: project.project_name,\n        },\n        {\n            name: \"product_group\",\n            label: \"Product Group\",\n            required: true,\n            value: project.product_group,\n        },\n        {\n            name: \"customer\",\n            label: \"Customer\",\n            required: true,\n            value: project.customer,\n        },\n        {\n            name: \"car\",\n            label: \"Car\",\n            required: true,\n            value: project.car,\n        },\n        {\n            name: \"mdb_status\",\n            label: \"MDB Status\",\n            required: true,\n            select: true,\n            selectItem: select_MDB,\n            value: project.mdb_status,\n        },\n        {\n            name: \"project_status\",\n            label: \"Project Status\",\n            select: true,\n            selectItem: select_project_status,\n            value: project.project_status,\n        },\n\n        {\n            name: \"dd_location\",\n            label: \"D&D Location\",\n            value: project.dd_location,\n        },\n        {\n            name: \"production_line\",\n            label: \"Production Line\",\n            value: project.production_line,\n        },\n        {\n            name: \"fg_part_number\",\n            label: \"FG Part Number\",\n            value: project.fg_part_number,\n        },\n        {\n            name: \"production_cycle_time\",\n            label: \"Production Cycle Time\",\n            value: project.production_cycle_time,\n            type: \"number\"\n        },\n        {\n            name: \"budget_available\",\n            label: \"Budget Available\",\n            select: true,\n            selectItem: select_BudgetAvailable,\n            value: project.budget_available,\n        },]\n\n\n    const TextFieldList_Timing: TextFieldProps[] = [\n        {\n            name: \"sop_hella_date\",\n            label: \"SOP Hella\",\n            required: true,\n            value: project.sop_hella_date,\n            type: \"date\"\n        },\n        {\n            name: \"run_rate_hella_date\",\n            label: \"Run@Rate Hella\",\n            value: project.run_rate_hella_date,\n            type: \"date\"\n\n        },\n        {\n            name: \"pv_hella_date\",\n            label: \"PV Hella\",\n            value: project.pv_hella_date,\n            type: \"date\"\n\n        },\n        {\n            name: \"sop_customer_date\",\n            label: \"SOP Customer\",\n            value: project.sop_customer_date,\n            type: \"date\"\n        },\n    ]\n\n    const TextFieldList_Team: TextFieldProps[] = [\n        {\n            name: \"pjm\",\n            label: \"PJM\",\n            required: true,\n            value: project.pjm,\n        },\n        {\n            name: \"pur\",\n            label: \"PUR\",\n            required: true,\n            value: project.pur,\n        },\n        {\n            name: \"md\",\n            label: \"MD\",\n            required: true,\n            value: project.md,\n        },\n        {\n            name: \"controlling\",\n            label: \"Controlling\",\n            required: true,\n            value: project.controlling,\n        },\n        {\n            name: \"sqa\",\n            label: \"SQA\",\n            value: project.sqa,\n        },\n        {\n            name: \"logistic\",\n            label: \"Logistic\",\n            value: project.logistic,\n        },\n        {\n            name: \"me\",\n            label: \"ME\",\n            value: project.me,\n        },\n    ]\n\n    const TextFieldList_Part: TextFieldProps[] = [\n        {\n            name: \"part\",\n            label: \"Part No.\",\n        },\n        {\n            name: \"part_description\",\n            label: \"Part Description \",\n        },\n        {\n            name: \"usage\",\n            label: \"Usage\",\n            type: \"number\",\n        },\n        {\n            name: \"sourcing_date\",\n            label: \"Sourcing Date\",\n            type: \"date\",\n        },\n        {\n            name: \"t1_date\",\n            label: \"T1 Date\",\n            type: \"date\",\n        },\n        {\n            name: \"t2_date\",\n            label: \"T2 Date\",\n            type: \"date\",\n        },\n        {\n            name: \"t3_date\",\n            label: \"T3 Date\",\n            type: \"date\"\n        },\n        {\n            name: \"pv_date\",\n            label: \"PV Date\",\n            type: \"date\"\n        },\n        {\n            name: \"ppap_date\",\n            label: \"PPAP Date\",\n            type: \"date\"\n        },\n    ]\n\n// Function to build normal TextField\n    const ElementListMaker_TextField = (TextFieldList: TextFieldProps[]) =>\n        TextFieldList.map(\n            function mapProject(textField: TextFieldProps, key: number) {\n                return (\n                    <TextField\n                        key={key}\n                        name={textField.name}\n                        // substring the date + replace null to \"\"\n                        value={(textField.type === \"date\" && typeof (textField.value) === \"string\") ? textField.value.substring(0, 10) : (textField.value || \"\")}\n                        type={textField.type}\n                        select={textField.select}\n                        label={textField.label}\n                        required={textField.required}\n                        InputLabelProps={{\n                            shrink: (textField.type === \"date\") ? true : undefined,\n                        }}\n                        className={classes.textfield_basic}\n                        onChange={handleChange_normalTextField}\n                    >{textField.selectItem}\n                    </TextField>\n                )\n            }\n        )\n\n    const ElementList_TextField_Basic = ElementListMaker_TextField(TextFieldList_Basic)\n    const ElementList_TextField_Team = ElementListMaker_TextField(TextFieldList_Team)\n    const ElementList_DateTextField_Project = ElementListMaker_TextField(TextFieldList_Timing)\n\n\n    // Function to build little TextField for Yearly Volume\n    const ElementListMaker_NumTextField = (Numbers: (number | string)[]) =>\n        Numbers.map(\n            function mapNumber(num: number | string, key: number) {\n                return (\n                    <TextField\n                        key={key}\n                        type=\"number\"\n                        name={key.toString()} //use name as index to position the number in list. used to be id but give it to Part element\n                        value={project.volume_list[key]}\n                        // name={`volume_${key.toString()}`}\n                        label={`Year ${(key + 1).toString()}`}\n                        // InputLabelProps={{\n                        //     shrink: true,\n                        // }}\n                        className={classes.textfield_small}\n                        // change value should goto project.vol with position index\n                        onChange={handleChange_volumeTextField}\n\n                    />\n                )\n            }\n        )\n\n    const ElementList_NumTextField_Volume = ElementListMaker_NumTextField(project.volume_list)\n\n\n    // Function to build special Textfield for single part (mainly handleChange logic is different)\n    const ElementListMaker_TextField_Part = (textFieldList_Part: TextFieldProps[], part_index: number) =>\n        textFieldList_Part.map(\n            function mapTextFieldList_Part(textField_Part: TextFieldProps, key: number) {\n                const propName: string = textField_Part.name\n                const targetPart: Part = project.part_list[part_index]\n                return (\n                    <TextField\n                        key={key}\n                        id={part_index.toString()}\n                        name={propName}\n                        value={targetPart[propName]}\n                        label={textField_Part.label}\n                        type={textField_Part.type}\n                        InputLabelProps={{\n                            shrink: (textField_Part.type === \"date\") ? true : undefined,\n                        }}\n                        className={classes.textfield_basic}\n                        onChange={handleChange_Part}\n                    />\n                )\n            }\n        )\n\n\n    // function to assemble Part Textfield\n    const ElementListMakerCombi_Part = (partList: Part[]) =>\n        partList.map(\n            function mapPartList(part: Part, key: number) {\n                return (\n                    <Fragment key={key}>\n                        <Grid item xs={1} className={classes.subtitle_part}>\n                            <Box component={\"h6\"} bgcolor=\"secondary.main\" color=\"primary.contrastText\" p={1}>\n                                Part {key + 1}\n                            </Box>\n                        </Grid>\n                        {ElementListMaker_TextField_Part(TextFieldList_Part, key)}\n                        {/*use key to indicate which part*/}\n                    </Fragment>\n                )\n            }\n        )\n\n    const ElementListCombi_Part = ElementListMakerCombi_Part(project.part_list)\n\n    // single number input for lifetime\n    const ButtonGroup_Lifetime =\n        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n            <Button onClick={handleClick_removeYear}>Year -</Button>\n            <Button onClick={handleClick_addYear}>Year +</Button>\n        </ButtonGroup>\n\n    // single number input for part\n    const ButtonGroup_Part =\n        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n            <Button onClick={handleClick_removePart}>Part -</Button>\n            <Button onClick={handleClick_addPart}>Part +</Button>\n        </ButtonGroup>\n\n// data change btw server\n    const url = `http://${document.domain}:${8080}`\n\n\n    const saveProject = () => {\n        //TODO check project id is not null\n\n        // send project to server with POST\n        const url_string = `${url}/project/new/info`\n        console.log(`[create project] at ${url_string}`)\n        axios({\n            url: url_string,\n            method: \"POST\",\n            params: project\n        }).then(response => {\n            //TODO give user a feedback\n            console.log(`[save project] response: ${response}`)\n        }).catch(err => {\n            console.log(`[save project] error: ${err}`)\n        })\n    }\n\n\n    const deleteProject = () => {\n        //TODO check project id is not null\n\n        // send project to server with POST\n        const url_string = `${url}/project/${project.project}/info`\n        console.log(`[delete project] at ${url_string}`)\n        axios({\n            url: url_string,\n            method: \"delete\",\n        }).then(response => {\n            //TODO give user a feedback\n            console.log(`[delete project] response: ${response.data}`)\n        }).catch(err => {\n            console.log(`[delete project] error: ${err}`)\n        })\n    }\n\n\n    const searchProject = (projectID: string) => {\n        //TODO check project id is not null\n\n        const url_string = `${url}/project/${projectID}/info`\n        console.log(`[search project] at ${url_string}`)\n        axios({\n            url: url_string,\n            method: \"get\",\n        }).then(response => {\n            //TODO give user a feedback\n            console.log(`[search project] response: ${JSON.stringify(response)}`)\n            set_project_with_response(response.data)\n        }).catch(err => {\n            console.log(`[search project] error: ${err}`)\n        })\n    }\n\n    const set_project_with_response = (data: {}) => {\n        // const new_project = Object.assign({}, data)\n        // for (let [key, value] of Object.entries(data)) {\n        //     if (value = null) {}\n        // }\n        setProject({\n            ...project,\n            ...data,\n        })\n    }\n\n\n    return (\n        <Fragment>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Box component={\"h2\"} bgcolor=\"secondary.main\" color=\"primary.contrastText\" p={2}>\n                        Project Info\n                    </Box>\n                </Grid>\n\n                <form noValidate autoComplete=\"off\">\n                    <SearchProject searchProject={searchProject}/>\n                    <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}>\n                        Basic\n                    </Typography>\n                    {ElementList_TextField_Basic}\n                    <Divider className={classes.divider_basic}/>\n                    <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}>\n                        Timing\n                    </Typography>\n                    {ElementList_DateTextField_Project}\n                    <Divider className={classes.divider_basic}/>\n                    <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}>\n                        Team\n                    </Typography>\n                    {ElementList_TextField_Team}\n                    <Divider className={classes.divider_basic}/>\n                    {/*Volumes*/}\n                    <Grid item xs={12}>\n                        <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}\n                                    display={\"inline\"}>\n                            Volume\n                        </Typography>\n                        {ButtonGroup_Lifetime}\n                    </Grid>\n                    {ElementList_NumTextField_Volume}\n                    <Divider className={classes.divider_basic}/>\n                    {/*Parts*/}\n                    <Grid item xs={12}>\n                        <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}\n                                    display={\"inline\"}>\n                            Part\n                        </Typography>\n                        {ButtonGroup_Part}\n                    </Grid>\n                    {ElementListCombi_Part}\n                    <Divider className={classes.divider_basic}/>\n                    <Grid container justify={\"center\"}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<SaveIcon/>}\n                            onClick={saveProject}\n                        >\n                            Save Project\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"inherit\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<DeleteIcon/>}\n                            onClick={deleteProject}\n                        >\n                            Delete Project\n                        </Button>\n                    </Grid>\n                </form>\n            </Grid>\n        </Fragment>\n    )\n}\n\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Webdatarocks from \"webdatarocks\";\nimport WebDataRocks from \"webdatarocks\";\n\nexport class Pivot extends React.Component<WebDataRocks.Params, any> {\n\t\n\twebdatarocks: WebDataRocks.Pivot | undefined\n\n\tcomponentDidMount() {\n\t\tthis.webdatarocks = new Webdatarocks({\n\t\t\t...this.props,\n\t\t\tcontainer: ReactDOM.findDOMNode(this)\n\t\t});\n\t}\n\t\n\tshouldComponentUpdate() {\n\t\treturn false;\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tif (this.webdatarocks) {\n\t\tthis.webdatarocks.dispose();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn <div>Pivot</div>;\n\t}\n}\n\nexport default Pivot;","import React, {Fragment, ChangeEvent, useState} from 'react'\nimport axios from 'axios';\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\nimport {\n    MenuItem,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    Button,\n    Grid,\n    Box,\n    Input, Checkbox, ListItemText\n} from \"@material-ui/core\";\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textfield_basic: {\n            margin: theme.spacing(3, 5),\n            width: 200,\n        },\n        divider_basic: {\n            margin: theme.spacing(1, 5),\n        },\n        subtitle: {\n            margin: theme.spacing(0, 3),\n        },\n        button: {\n            margin: theme.spacing(5, 5),\n        },\n        formControl: {\n            margin: theme.spacing(5, 5),\n            width: 200,\n        },\n    }),\n);\n\n\ntype SourceProps = {\n    project: string\n    vendor_available: string[]\n    vendor_selected: string\n    part_available: string[]\n    part_selected: string[]\n    file_selected: string\n}\n\nexport const SourcingDoc = () => {\n\n    const classes = useStyles();\n\n\n    const url: string = `http://${document.domain}:8080`\n\n    const initSource: SourceProps = {\n        project: \"\",\n        vendor_available: [],\n        vendor_selected: \"\",\n        part_selected: [],\n        part_available: [],\n        file_selected: \"\",\n    };\n\n    const [source, setSource] = useState(initSource)\n\n    const handleChangeFile = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const {value} = event.target\n        setSource({\n            ...initSource,\n            file_selected: value,\n        })\n    }\n\n    const handleProjectChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const {name, value} = event.target\n        setSource({\n            ...source,\n            [name]: value\n        })\n    }\n\n    const handleProjectBlur = () => {\n        if (source.file_selected === \"nomination letter\") {\n            fetchVendor()\n        } else if (source.file_selected === \"risk evaluation\") {\n            fetchPart_Project()\n        }\n    }\n\n    const fetchVendor = () => {\n        //TODO check if any project is less than 11\n        const project = source.project\n        if (project.length > 11) {\n            const url_string: string = `${url}/project/${project}/vendors`\n            axios.get(url_string).then(res => {\n                setSource({\n                    ...source,\n                    vendor_available: res.data,\n                    vendor_selected: \"\",\n                    part_available: [],\n                    part_selected: [],\n                })\n                console.log(\"[fetch vendor] responsible data below: \")\n                console.log(res.data)\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n    }\n\n\n    function fetchPart_Project() {\n\n        const url_string: string = `${url}/project/${source.project}/parts`\n        axios.get(url_string).then(res => {\n            setSource({\n                ...source,\n                part_available: (res.data) ? res.data.concat([\"all\"]) : [],\n                part_selected: [],\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n\n    function handleVendorSelect(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n        const vendor = event.target.value\n\n        const url_string: string = `${url}/project/${source.project}/vendor/${vendor}/parts`\n        axios.get(url_string).then(res => {\n            setSource({\n                ...source,\n                vendor_selected: vendor,\n                part_available: (res.data) ? res.data.concat([\"all\"]) : [],\n                part_selected: [],\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n\n    const handleChangePart = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setSource({\n            ...source,\n            part_selected: event.target.value as string[]\n        });\n    };\n\n    function fileDownload() {\n        let url_string: string = `${url}/docs`\n        axios({\n            url: url_string,\n            method: 'GET',\n            params: {\n                file: source.file_selected,\n                project: source.project,\n                vendor: source.vendor_selected,\n                part_list: source.part_selected,\n            }\n        }).then(\n            (res) => {\n                console.log(\"[download file] responsible below: \")\n                console.log(JSON.stringify(res.data))\n                const filename = res.data\n                if (filename) {\n                    const url_download = `${url}/downloads/${filename}`\n                    const link = document.createElement('a');\n                    link.href = url_download;\n                    document.body.appendChild(link);\n                    link.click();\n                    link.remove()\n                }\n            }\n        ).catch(err => {\n            console.log(err)\n        })\n    }\n\n\n    const SelectMaker = (options: string[]) =>\n        options.map(\n            (option: string, key: number) =>\n                <MenuItem key={key} value={option}>\n                    {option}\n                </MenuItem>\n        )\n\n\n    const option_file: string[] = [\n        \"risk evaluation\",\n        \"supplier selection\",\n        \"cost breakdown\",\n        \"nomination letter\",\n\n    ]\n\n\n    const selectOption_file = SelectMaker(option_file)\n    const selectOption_vendor = SelectMaker(source.vendor_available)\n\n    // menu style for tag multi selector\n    const ITEM_HEIGHT = 48;\n    const ITEM_PADDING_TOP = 8;\n    const MenuProps = {\n        PaperProps: {\n            style: {\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n                width: 250,\n            },\n        },\n    };\n\n\n    return (\n        <Fragment>\n\n            <Grid item xs={12}>\n                <Box component={\"h2\"} bgcolor=\"secondary.main\" color=\"primary.contrastText\" p={2}>\n                    Sourcing Document Auto\n                </Box>\n                <Box component={\"h5\"} bgcolor=\"primary.main\" color=\"primary.contrastText\" p={1}>\n                    Nomination Roadmap Data updates over-night after you input into Data Warehouse.\n                </Box>\n            </Grid>\n            <form autoComplete={\"off\"}>\n\n                <Grid item xs={12}>\n                    {/* file selection */}\n                    <TextField\n                        name = \"file_selected\"\n                        label= \"File Type\"\n                        className={classes.textfield_basic}\n                        select\n                        value={source.file_selected}\n                        onChange={handleChangeFile}>\n                        {selectOption_file}\n                    </TextField>\n\n                    {/* project input */}\n                    <TextField\n                        name={\"project\"}\n                        label={\"Project No.\"}\n                        className={classes.textfield_basic}\n                        value={source.project}\n                        onChange={handleProjectChange}\n                        onBlur={handleProjectBlur}>\n                        {selectOption_file}\n                    </TextField>\n                </Grid>\n\n                <Grid item xs={12}>\n                    {/* vendor selection */}\n                    <TextField\n                        label={\"Vendor\"}\n                        disabled={(source.file_selected !== \"nomination letter\")}\n                        className={classes.textfield_basic}\n                        select\n                        value={source.vendor_selected}\n                        onChange={handleVendorSelect}>\n                        {selectOption_vendor}\n                    </TextField>\n                </Grid>\n\n                <Grid item xs={12}>\n                    {/*part selection*/}\n                    <FormControl className={classes.formControl}>\n                        <InputLabel>Part</InputLabel>\n                        <Select\n                            multiple\n                            value={source.part_selected}\n                            onChange={handleChangePart}\n                            input={<Input/>}\n                            disabled={(source.file_selected === \"CBD\" || source.file_selected === \"supplier selection\")}\n                            renderValue={selected => (selected as string[]).join(', ')}\n                            MenuProps={MenuProps}\n                        >\n                            {source.part_available.map(part => (\n                                <MenuItem key={part} value={part}>\n                                    <Checkbox checked={source.part_selected.indexOf(part) > -1}/>\n                                    <ListItemText primary={part}/>\n                                </MenuItem>\n                            ))}\n                        </Select>\n                    </FormControl>\n                </Grid>\n\n                {/*Button*/}\n                <Grid item xs={12}>\n                    {/*  download btn */}\n                    <Button variant=\"contained\"\n                            color=\"secondary\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<GetAppIcon/>}\n                            onClick={fileDownload}>\n                        Download\n                    </Button>\n                </Grid>\n\n                {/* helper show board */}\n                {/*<h3>project: {source.project}</h3>*/}\n                {/*<h3>vendor selected: {source.vendor_selected}</h3>*/}\n                {/*<h3>parts available: {source.part_available}</h3>*/}\n                {/*<h3>parts selected: {source.part_selected}</h3>*/}\n                {/*<h3>file: {source.file_selected}</h3>*/}\n\n\n            </form>\n        </Fragment>\n    )\n}\n\n","import React, {Fragment, useState} from \"react\"\nimport {Upload, Button, Icon} from \"antd\"\nimport Typography from \"@material-ui/core/Typography\";\n\nconst url = `http://${document.domain}:${8080}`\n\n\nexport const Uploader = () => {\n\n    const [msg, setMsg] = useState(\"\")\n\n    const props = {\n        name: 'file',\n        action: `${url}/upload`,\n        headers: {\n            authorization: 'authorization-text',\n        },\n        onChange(info: any) {\n            if (info.file.status !== 'uploading') {\n                setMsg(\"uploading\")\n            }\n            if (info.file.status === 'done') {\n                setMsg(\"upload done\")\n            } else if (info.file.status === 'error') {\n                setMsg(\"upload failed\")\n            }\n        }\n    }\n\n\n    return (\n        <Fragment>\n            <Upload {...props}>\n                <Button>\n                    <Icon type=\"upload\"/> Click to Upload\n                </Button>\n            </Upload>\n            <Typography variant=\"h6\" color=\"inherit\">\n                {msg}\n            </Typography>\n        </Fragment>\n    )\n}","import React from 'react'\nimport {Grid, Link} from \"@material-ui/core\";\n\nexport const About = () => {\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                <p>This Web App is just demo.</p>\n            </Grid>\n            <Grid item>\n                <p>Web Browser IE is not supported. Please use win10 built-in Edge or Chrome.</p>\n            </Grid>\n            <Grid item>\n                <p> {\"If you have any new idea, suggestion or bug report, email to \"}\n                    <Link href=\"mailto: ming.chen@hella.com\">\n                        ming.chen@hella.com.\n                    </Link>\n                </p>\n            </Grid>\n        </Grid>\n    )\n}","import React, {ChangeEvent, Fragment, useState} from 'react'\nimport {Grid, MenuItem, TextField, Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport axios from 'axios';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textfield_large: {\n            margin: theme.spacing(1, 1),\n            width: 300,\n        },\n        textfield_small: {\n            margin: theme.spacing(1, 1),\n            width: 200,\n        },\n        button: {\n            margin: theme.spacing(5, 3),\n        },\n        title: {\n            margin: theme.spacing(1, 1),\n        },\n        table: {\n            minWidth: 300,\n            maxWidth: 500,\n        },\n    }),\n);\n\ntype ROW = string[]\n\ntype QS = {\n    category: string\n    keyword: string\n    result: {\n        fields: string[]\n        rows: ROW[]\n    }\n}\n\nconst initSearch: QS = {\n    category: \"\",\n    keyword: \"\",\n    result: {\n        fields: [],\n        rows: [],\n    },\n}\nexport const QuickSearch = () => {\n\n    const classes = useStyles();\n    const [search, setSearch] = useState(initSearch)\n\n\n    const optionCategory: string[] = [\n        \"Project Name\",\n        \"Project ID\",\n        \"Vendor Name\",\n        \"Vendor ID\",\n        \"Part Number\",\n    ]\n\n    const selectCategory = optionCategory.map(\n        (option: string, key: number) =>\n            <MenuItem key={key} value={option}>\n                {option}\n            </MenuItem>\n    )\n\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name, value} = event.target\n        setSearch({\n            ...search,\n            [name]: value\n        })\n    }\n\n    //TODO check online if better type than KeyboardEvent<HTMLdivEvent>\n    const handleReturn = (event: any) => {\n        console.log(`Pressed keyCode ${event.key}`);\n        if (event.key === 'Enter') {\n            fetchResult()\n            event.preventDefault();\n        }\n    }\n\n\n    const fetchResult = () => {\n        const url: string = `http://${document.domain}:8080`\n        const url_string: string = `${url}/qs`\n        axios({\n            url: url_string,\n            method: 'GET',\n            params: {\n                category: search.category,\n                keyword: search.keyword,\n            }\n        }).then(\n            (res) => {\n                console.log(\"[quick search] responsible below: \")\n                console.log(JSON.stringify(res.data))\n                // guard in case result in None\n                if (res.data) {\n                    setSearch({\n                        ...search,\n                        result: res.data,\n                    })\n                }\n            }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    const {fields, rows} = search.result\n\n    const tableHead = fields.map(\n        (field: string, key: number) => <TableCell align=\"left\" key={key}>{field}</TableCell>\n    )\n\n    const tableBody = rows.map((row, row_id) => (\n        <TableRow key={row_id}>\n            {row.map(\n                (cell: string, cell_id: number) => (\n                    <TableCell component=\"th\" scope=\"row\" key={cell_id}>{cell}</TableCell>\n                )\n            )\n            }\n        </TableRow>\n    ))\n\n\n    return (\n        <Fragment>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} variant=\"h4\" color={\"textPrimary\"}>\n                        Quick Search\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} variant=\"subtitle1\" color={\"textPrimary\"}>\n                        Support Fuzzy Search\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <TextField\n                        name=\"category\"\n                        value={search.category}\n                        label=\"Type\"\n                        select\n                        className={classes.textfield_small}\n                        onChange={handleChange}\n                    >{selectCategory}</TextField>\n                </Grid>\n\n\n                <Grid item xs={9}>\n                    <TextField\n                        name=\"keyword\"\n                        value={search.keyword}\n                        label=\"Keyword\"\n                        className={classes.textfield_large}\n                        onChange={handleChange}\n                        onKeyPress={handleReturn}\n                    />\n                </Grid>\n            </Grid>\n\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            {tableHead}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {tableBody}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Fragment>\n    )\n}\n\n\n","import React, {ReactElement} from \"react\";\nimport {RouteComponentProps} from 'react-router-dom'\nimport {ProjectInput} from \"./components/projectSingle/ProjectInput\";\nimport {ProjectReport} from \"./components/projectReport/ProjectReport\";\nimport {SourcingDoc} from \"./components/SourcingDoc\";\nimport {Uploader} from \"./components/Uploader\";\nimport {About} from \"./components/About\";\nimport {QuickSearch} from \"./components/QuickSearch\";\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PublishIcon from '@material-ui/icons/Publish';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport ListIcon from '@material-ui/icons/List';\nimport SearchIcon from '@material-ui/icons/Search';\nimport AddCircle from \"@material-ui/icons/Mail\";\n\nexport type page = {\n    name: string\n    path: string\n    icon: ReactElement\n    component: (props: RouteComponentProps) => ReactElement\n}\n\nexport const pages: page[] = [\n    {\n        path: `/`,\n        name: 'About App',\n        icon: <ListIcon/>,\n        component: About\n    },\n    {\n        path: `/search`,\n        name: 'Quick Search',\n        icon: <SearchIcon/>,\n        component: QuickSearch\n    },\n    {\n        path: `/project`,\n        name: 'Project Info',\n        icon: <AddCircle/>,\n        component: ProjectInput\n    },\n    {\n        path: '/project_report',\n        name: 'Project Report',\n        icon: <EqualizerIcon/>,\n        component: ProjectReport\n    },\n    {\n        path: '/sourcing_doc',\n        name: \"Sourcing Document\",\n        icon: <DescriptionIcon/>,\n        component: SourcingDoc\n    },\n    {\n        path: '/upload',\n        name: \"Data Upload\",\n        icon: <PublishIcon/>,\n        component: Uploader\n    },\n    {\n        path: '/tutorial',\n        name: \"Tutorial\",\n        icon: <PlayCircleOutlineIcon/>,\n        component: About\n    },\n]\n","import React from 'react'\n\nimport {RouteComponentProps} from 'react-router-dom'\nimport * as WebDataRocks from \"./webdatarocks/webdatarocks.react\";\nimport \"webdatarocks/webdatarocks.css\";\n\ninterface ProjectReportProps extends RouteComponentProps {\n}\n\n\nexport const ProjectReport = (props: ProjectReportProps) => {\n\n    // WebDataRock\n    const ref: React.RefObject<WebDataRocks.Pivot> = React.useRef<WebDataRocks.Pivot>(null);\n\n    const onReportComplete = () => {\n        if (ref.current && ref.current.webdatarocks) {\n            ref.current.webdatarocks.off(\"reportcomplete\");\n            console.log(ref.current.webdatarocks);\n        }\n    }\n\n    const url = `http://${document.domain}:${8080}/downloads/report.json`\n\n\n    return (\n        <div className=\"App\">\n            <WebDataRocks.Pivot ref={ref} toolbar={true} width=\"100%\" reportcomplete={() => onReportComplete()}\n                                report={url}></WebDataRocks.Pivot>\n        </div>\n    )\n}","import React from 'react'\nimport {Switch, Route, BrowserRouter as Router} from \"react-router-dom\";\nimport {page, pages} from \"../routes\"\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {Container} from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n            appBarSpacer: theme.mixins.toolbar,\n            content: {\n                flexGrow: 1,\n                height: '100vh',\n                overflow: 'auto',\n            },\n            container: {\n                paddingTop: theme.spacing(4),\n                paddingBottom: theme.spacing(4),\n            },\n            paper: {\n                padding: theme.spacing(2),\n                display: 'flex',\n                overflow: 'auto',\n                flexDirection: 'column',\n            },\n        },\n    ));\n\n\nconst switchPages = pages.map(\n    (item: page, key: number) =>\n        <Route exact\n            path={item.path}\n            component={item.component}\n            key={key}\n        />\n)\n\n\nexport const Main = () => {\n    const classes = useStyles()\n\n    return (\n        <main className={classes.content}>\n            <div className={classes.appBarSpacer}/>\n            <Container maxWidth=\"lg\" className={classes.container}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12} md={10} lg={10}>\n                        <Paper className={classes.paper}>\n                            <Router>\n                                <Switch>\n                                    {switchPages}\n                                </Switch>\n                            </Router>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </main>\n    )\n}","import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\n\n\nexport const Header = (props: any) => {\n    const classes = props.className\n\n    return (\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\" >\n                    Purchasing App DEMO\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}","import List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport React from \"react\";\nimport {page, pages} from \"../routes\"\n\n\nconst itemList = pages.map(\n    function mapPage(item: page, key: number) {\n        return (\n            <ListItem button key={key} component=\"a\" href={item.path}>\n                <ListItemIcon>{item.icon}</ListItemIcon>\n                <ListItemText primary={item.name}/>\n            </ListItem>\n        )\n    }\n)\n\n\nexport const Sidebar = (props: any) => {\n    const classes = props.className\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n        >\n            <div className={classes.toolbar}/>\n            <List>\n                {itemList}\n            </List>\n            <Divider/>\n        </Drawer>\n    )\n}","import React from 'react'\nimport {Main} from './components/Main'\nimport {Header} from \"./components/Header\";\nimport {Sidebar} from './components/Sidebar'\n\nimport {makeStyles, createStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: any) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n        toolbar: theme.mixins.toolbar,\n    }),\n);\n\n\nexport const App = () => {\n\n\n    const classes = useStyles();\n    return (\n\n        <div className={classes.root}>\n            <CssBaseline/>\n            <Header className={classes}/>\n            <Sidebar className={classes}/>\n            <Main/>\n\n        </div>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n"],"sourceRoot":""}