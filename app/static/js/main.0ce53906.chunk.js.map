{"version":3,"sources":["components/projectSingle/SearchProject.tsx","components/projectSingle/ProjectInput.tsx","components/projectReport/webdatarocks/webdatarocks.react.tsx","components/SourcingDoc.tsx","components/QuickSearch.tsx","components/logisticsDashboard/CapacityChart.tsx","components/logisticsDashboard/LogisticsDashboard.tsx","routes.tsx","components/projectReport/ProjectReport.tsx","components/Tutorial.tsx","components/About.tsx","components/Main.tsx","components/Header.tsx","components/Sidebar.tsx","App.tsx","index.tsx"],"names":["SearchProject","props","searchProject","useState","open","setOpen","projectID","setProjectID","Dialog","onClose","DialogTitle","DialogContent","TextField","label","autoFocus","required","onChange","event","value","target","DialogActions","Button","onClick","color","useStyles","makeStyles","theme","createStyles","textfield_basic","margin","spacing","width","textfield_small","divider_basic","divider_small","subtitle","subtitle_part","button","initPart","part","part_description","usage","target_price","target_invest","sourcing_date","t1_date","t2_date","t3_date","pv_date","ppap_date","project","initProject","product_group","project_name","customer","car","mdb_status","project_status","dd_location","production_line","fg_part_number","production_cycle_time","budget_available","sop_hella_date","run_rate_hella_date","pv_hella_date","sop_customer_date","pjm","pur","md","controlling","sqa","logistic","me","volume_list","Array","fill","part_list","Pivot","webdatarocks","this","Webdatarocks","container","ReactDOM","findDOMNode","dispose","React","Component","formControl","textfield_large","title","table","minWidth","maxWidth","initSearch","category","keyword","result","fields","rows","CapacityChart","demand","capacityDataMaker","capacities","points","map","obj","push","x","Date","interval","begin","y","capacity","end","scale","VictoryTheme","material","height","animate","duration","containerComponent","data","qty","_","key","date","style","opacity","stroke","apn","nl","tool","standalone","orientation","name","symbol","pages","path","icon","component","classes","search","setSearch","selectCategory","option","MenuItem","handleChange","fetchResult","url","document","domain","url_string","axios","method","params","then","res","console","log","JSON","stringify","err","tableHead","field","TableCell","align","tableBody","row","row_id","TableRow","cell","cell_id","scope","Grid","item","xs","Typography","className","variant","select","onKeyPress","preventDefault","TableContainer","Paper","Table","aria-label","TableHead","TableBody","initSource","vendor_available","vendor_selected","part_selected","part_available","file_selected","source","setSource","fetchVendor","trim","length","get","SelectMaker","options","selectOption_file","selectOption_vendor","MenuProps","PaperProps","maxHeight","ITEM_HEIGHT","Box","bgcolor","p","autoComplete","onBlur","fetchPart_Project","disabled","vendor","FormControl","InputLabel","Select","multiple","input","Input","renderValue","selected","join","Checkbox","checked","indexOf","ListItemText","primary","FormHelperText","size","startIcon","file","filename","url_download","link","createElement","href","body","appendChild","click","remove","initDelivery","nrm","setNrm","delivery","setDelivery","getNRMData","updateVendorAvailable","rc","first_vendor","updateDelivery","nrmProjectInfo","vendor_list","vendor_name","volumes","volume","year","year_volume","toFixed","week_capacity","optionVendors","onSubmit","setProject","handleChange_normalTextField","handleChange_volumeTextField","clone_list","parseInt","handleChange_Part","id","index","clone_part","parse","clone_part_list","select_MDB","select_project_status","select_BudgetAvailable","TextFieldList_Basic","selectItem","type","TextFieldList_Timing","TextFieldList_Team","TextFieldList_Part","ElementListMaker_TextField","TextFieldList","textField","substring","InputLabelProps","shrink","undefined","ElementList_TextField_Basic","ElementList_TextField_Team","ElementList_DateTextField_Project","ElementList_NumTextField_Volume","num","toString","ElementListCombi_Part","part_index","textField_Part","propName","targetPart","ButtonGroup_Lifetime","ButtonGroup","new_volume_list","pop","ButtonGroup_Part","new_part_list","copy_part","set_project_with_response","noValidate","response","catch","Divider","display","justify","ref","useRef","toolbar","reportcomplete","current","off","report","url1","Link","appBarSpacer","mixins","content","flexGrow","overflow","paddingTop","paddingBottom","paper","padding","flexDirection","switchPages","exact","Main","Container","Header","AppBar","position","appBar","Toolbar","itemList","ListItem","ListItemIcon","Sidebar","Drawer","drawer","drawerPaper","root","zIndex","flexShrink","render","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.0ce53906.chunk.js","sourcesContent":["import React, {ChangeEvent, Fragment, useState} from 'react';\nimport Button from '@material-ui/core/Button';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\n\n// what is the props' type\n// interface SearchProjectProps\n\nexport const SearchProject = (props:any) => {\n\n    const searchProject = props.searchProject\n\n    const [open, setOpen] = useState(true)\n    const [projectID, setProjectID] = useState(\"\")\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const {value} = event.target\n        setProjectID(value)\n    }\n\n    const handleClose = () => {\n        setOpen(false)\n    }\n\n    const handleClick_searchProject = () => {\n        searchProject(projectID)\n        setOpen(false)\n    };\n\n\n    return (\n        <Fragment>\n            <Dialog open={open} onClose={handleClose}>\n                <DialogTitle>Enter Project ID</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        label=\"Project ID\"\n                        autoFocus\n                        required={true}\n                        onChange={handleChange}\n                        value={projectID}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick_searchProject} color=\"secondary\">\n                        Search\n                    </Button>\n                    <Button onClick={()=>setOpen(false)} color=\"inherit\">\n                        Create New\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Fragment>\n    );\n}","import React, {ChangeEvent, Fragment, ReactElement, useState} from 'react';\nimport axios from 'axios';\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\nimport {\n    MenuItem,\n    Typography,\n    Divider,\n    Button,\n    ButtonGroup, Box\n} from \"@material-ui/core\";\nimport SaveIcon from '@material-ui/icons/Save';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nimport {Grid, TextField} from \"@material-ui/core\";\nimport {SearchProject} from \"./SearchProject\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textfield_basic: {\n            margin: theme.spacing(1, 3),\n            width: 200,\n        },\n        textfield_small: {\n            margin: theme.spacing(1, 3),\n            width: 100,\n        },\n        divider_basic: {\n            margin: theme.spacing(5, 2),\n        },\n        divider_small: {\n            margin: theme.spacing(1, 2),\n        },\n        subtitle: {\n            margin: theme.spacing(0, 3),\n        },\n        subtitle_part: {\n            margin: theme.spacing(3, 3),\n        },\n        button: {\n            margin: theme.spacing(5, 3),\n        }\n    }),\n);\n\n\n// interface ProjectSingleProps extends RouteComponentProps {\n// }\n\n\n// props to control each input element\ntype TextFieldProps = {\n    id?: number\n    name: string\n    label: string\n    required?: boolean\n    select?: boolean\n    type?: string\n    selectItem?: ReactElement[]\n    value?: string | number | boolean\n}\n\ntype Part = {\n    part: string\n    part_description: string\n    usage: number | string\n    target_price: number | string\n    target_invest: number | string\n    sourcing_date: string\n    t1_date: string\n    t2_date: string\n    t3_date: string\n    pv_date: string\n    ppap_date: string\n    project: string\n    [propName: string]: string | number // [propName:string] string here means: all fields are string?\n    // [propName: number]: string | number | null\n\n}\n\n// use to store name:value tuple between server and view. Name it \"project\" object.\n// all these fields/keys are mandatory\ntype ProjectProps = {\n    product_group: string\n    project_name: string\n    customer: string\n    car: string\n    mdb_status: string\n    project_status: string\n    project: string\n    dd_location: string\n    production_line: string\n    fg_part_number: string\n    production_cycle_time: number | string\n    budget_available: string\n\n    // timing\n    sop_hella_date: string\n    run_rate_hella_date: string\n    pv_hella_date: string\n    sop_customer_date: string\n\n    // team\n    pjm: string\n    pur: string\n    md: string\n    controlling: string\n    sqa: string\n    logistic: string\n    me: string\n\n    // volume\n    volume_list: (number | string)[]\n\n    // parts\n    part_list: Part[]\n}\n\nconst initPart: Part = {\n    part: \"\",\n    part_description: \"\",\n    usage: \"\",\n    target_price: \"\",\n    target_invest: \"\",\n    sourcing_date: \"\",\n    t1_date: \"\",\n    t2_date: \"\",\n    t3_date: \"\",\n    pv_date: \"\",\n    ppap_date: \"\",\n    project: \"\",\n}\n\n\nconst initProject: ProjectProps = {\n    product_group: \"\",\n    project_name: \"\",\n    customer: \"\",\n    car: \"\",\n    mdb_status: \"\",\n    project_status: \"\",\n    project: \"\",\n    dd_location: \"\",\n    production_line: \"\",\n    fg_part_number: \"\",\n    production_cycle_time: \"\",\n    budget_available: \"\",\n\n    // timing\n    sop_hella_date: \"\",\n    run_rate_hella_date: \"\",\n    pv_hella_date: \"\",\n    sop_customer_date: \"\",\n\n    // team\n    pjm: \"\",\n    pur: \"\",\n    md: \"\",\n    controlling: \"\",\n    sqa: \"\",\n    logistic: \"\",\n    me: \"\",\n\n    // volume\n    volume_list: Array(3).fill(\"\"),\n\n    // part\n    part_list: [initPart],\n}\n\n\nexport const ProjectInput = () => {\n\n    const classes = useStyles();\n\n    const [project, setProject] = useState(initProject)\n\n    // ============= change handler function ==========\n    // normal TextField handler\n    const handleChange_normalTextField = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const {name, value} = event.target\n        console.log(`[handle input change]: name=${name}, value=${value}`)\n        setProject({\n            ...project,\n            [name]: value\n        })\n        console.log(`[handle input change]: now project info is ${JSON.stringify(project)}`)\n    }\n\n    // volume list handler\n    const handleChange_volumeTextField = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name, value} = event.target //use name(same as key) as index for searching in volume list. Deep clone.\n        let clone_list: (number | string)[] = [...project.volume_list]\n        clone_list[parseInt(name)] = parseInt(value)\n        setProject({\n            ...project,\n            volume_list: clone_list\n        })\n    }\n\n    //TODO limit the input that project/part is not null\n\n    // handle part value update\n    const handleChange_Part = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name, value, id} = event.target\n        // console.log(`>>> part input name is: ${name}`)\n        // console.log(`>>> part input value is: ${value}`)\n        // console.log(`>>> part input id is: ${id}`)\n        const index = parseInt(id)\n        //use id(same as key) as index for part searching in part list. Deep clone.\n        let clone_part = JSON.parse(JSON.stringify(project.part_list[index]))\n        // console.log(`>>> clone part is: ${JSON.stringify(clone_part)}`)\n\n        // use name to update the target attribute\n        clone_part[name] = value\n        // deep clone the whole part_list\n        let clone_part_list = JSON.parse(JSON.stringify(project.part_list))\n        // replace the part in clone_part_list with clone_part\n        clone_part_list[index] = clone_part\n        // console.log(`>>> clone part value is: ${clone_part}`)\n        // replace the real part_list with clone_part_list\n        setProject({\n            ...project,\n            part_list: clone_part_list\n        })\n    }\n\n    // add year handler\n    const handleClick_addYear = () => {\n        let new_volume_list = [...project.volume_list]\n        new_volume_list.push(\"\")\n        setProject({\n            ...project,\n            volume_list: new_volume_list\n        })\n    }\n\n    // remove year handler\n    const handleClick_removeYear = () => {\n        let new_volume_list = [...project.volume_list]\n        new_volume_list.pop()\n        setProject({\n            ...project,\n            volume_list: new_volume_list\n        })\n    }\n\n    // add part handler\n    const handleClick_addPart = () => {\n        // deep clone a new part\n        const copy_part = JSON.parse(JSON.stringify(initPart))\n        // deep clone the new part list\n        let new_part_list = JSON.parse(JSON.stringify(project.part_list))\n        new_part_list.push(copy_part)\n\n        setProject({\n            ...project,\n            part_list: new_part_list\n        })\n    }\n\n    // remove part handler\n    const handleClick_removePart = () => {\n        // deep clone a new part list\n        let new_part_list = JSON.parse(JSON.stringify(project.part_list))\n        // pop out the last one\n        new_part_list.pop()\n        setProject({\n            ...project,\n            part_list: new_part_list\n        })\n    }\n\n\n    // =========== data preparing ============\n\n    // Selector Option for MDB status\n    const option_MDB: string[] = [\n        \"New\",\n        \"Can\",\n        \"Must\",\n        \"ORDER\",\n        \"No Go\",\n    ]\n\n    const option_project_status: string[] = [\n        \"Acquisition\",\n        \"Nomination\",\n        \"Lost\",\n        \"On Hold\",\n        \"OtD\",\n        \"TtM\",\n    ]\n\n    const option_BudgetAvailable: string[] = [\n        \"Available\",\n        \"Not Yet\"\n    ]\n\n\n    const SelectMaker = (options: string[]) =>\n        options.map(\n            (option: string, key: number) =>\n                <MenuItem key={key} value={option}>\n                    {option}\n                </MenuItem>\n        )\n\n    const select_MDB = SelectMaker(option_MDB)\n    const select_project_status = SelectMaker(option_project_status)\n    const select_BudgetAvailable = SelectMaker(option_BudgetAvailable)\n\n\n// Behaviour Setting of Input TextField\n    const TextFieldList_Basic: TextFieldProps[] = [\n        {\n            name: \"project\",\n            label: \"Project No.\",\n            value: project.project\n        },\n        {\n            name: \"project_name\",\n            label: \"Project Name\",\n            required: true,\n            value: project.project_name,\n        },\n        {\n            name: \"product_group\",\n            label: \"Product Group\",\n            required: true,\n            value: project.product_group,\n        },\n        {\n            name: \"customer\",\n            label: \"Customer\",\n            required: true,\n            value: project.customer,\n        },\n        {\n            name: \"car\",\n            label: \"Car\",\n            required: true,\n            value: project.car,\n        },\n        {\n            name: \"mdb_status\",\n            label: \"MDB Status\",\n            required: true,\n            select: true,\n            selectItem: select_MDB,\n            value: project.mdb_status,\n        },\n        {\n            name: \"project_status\",\n            label: \"Project Status\",\n            select: true,\n            selectItem: select_project_status,\n            value: project.project_status,\n        },\n\n        {\n            name: \"dd_location\",\n            label: \"D&D Location\",\n            value: project.dd_location,\n        },\n        {\n            name: \"production_line\",\n            label: \"Production Line\",\n            value: project.production_line,\n        },\n        {\n            name: \"fg_part_number\",\n            label: \"FG Part Number\",\n            value: project.fg_part_number,\n        },\n        {\n            name: \"production_cycle_time\",\n            label: \"Production Cycle Time\",\n            value: project.production_cycle_time,\n            type: \"number\"\n        },\n        {\n            name: \"budget_available\",\n            label: \"Budget Available\",\n            select: true,\n            selectItem: select_BudgetAvailable,\n            value: project.budget_available,\n        },]\n\n\n    const TextFieldList_Timing: TextFieldProps[] = [\n        {\n            name: \"sop_hella_date\",\n            label: \"SOP Hella\",\n            required: true,\n            value: project.sop_hella_date,\n            type: \"date\"\n        },\n        {\n            name: \"run_rate_hella_date\",\n            label: \"Run@Rate Hella\",\n            value: project.run_rate_hella_date,\n            type: \"date\"\n\n        },\n        {\n            name: \"pv_hella_date\",\n            label: \"PV Hella\",\n            value: project.pv_hella_date,\n            type: \"date\"\n\n        },\n        {\n            name: \"sop_customer_date\",\n            label: \"SOP Customer\",\n            value: project.sop_customer_date,\n            type: \"date\"\n        },\n    ]\n\n    const TextFieldList_Team: TextFieldProps[] = [\n        {\n            name: \"pjm\",\n            label: \"PJM\",\n            required: true,\n            value: project.pjm,\n        },\n        {\n            name: \"pur\",\n            label: \"PUR\",\n            required: true,\n            value: project.pur,\n        },\n        {\n            name: \"md\",\n            label: \"MD\",\n            required: true,\n            value: project.md,\n        },\n        {\n            name: \"controlling\",\n            label: \"Controlling\",\n            required: true,\n            value: project.controlling,\n        },\n        {\n            name: \"sqa\",\n            label: \"SQA\",\n            value: project.sqa,\n        },\n        {\n            name: \"logistic\",\n            label: \"Logistic\",\n            value: project.logistic,\n        },\n        {\n            name: \"me\",\n            label: \"ME\",\n            value: project.me,\n        },\n    ]\n\n    const TextFieldList_Part: TextFieldProps[] = [\n        {\n            name: \"part\",\n            label: \"Part No.\",\n        },\n        {\n            name: \"part_description\",\n            label: \"Part Description \",\n        },\n        {\n            name: \"usage\",\n            label: \"Usage\",\n            type: \"number\",\n        },\n        {\n            name: \"sourcing_date\",\n            label: \"Sourcing Date\",\n            type: \"date\",\n        },\n        {\n            name: \"t1_date\",\n            label: \"T1 Date\",\n            type: \"date\",\n        },\n        {\n            name: \"t2_date\",\n            label: \"T2 Date\",\n            type: \"date\",\n        },\n        {\n            name: \"t3_date\",\n            label: \"T3 Date\",\n            type: \"date\"\n        },\n        {\n            name: \"pv_date\",\n            label: \"PV Date\",\n            type: \"date\"\n        },\n        {\n            name: \"ppap_date\",\n            label: \"PPAP Date\",\n            type: \"date\"\n        },\n    ]\n\n// Function to build normal TextField\n    const ElementListMaker_TextField = (TextFieldList: TextFieldProps[]) =>\n        TextFieldList.map(\n            function mapProject(textField: TextFieldProps, key: number) {\n                return (\n                    <TextField\n                        key={key}\n                        name={textField.name}\n                        // substring the date + replace null to \"\"\n                        value={(textField.type === \"date\" && typeof (textField.value) === \"string\") ? textField.value.substring(0, 10) : (textField.value || \"\")}\n                        type={textField.type}\n                        select={textField.select}\n                        label={textField.label}\n                        required={textField.required}\n                        InputLabelProps={{\n                            shrink: (textField.type === \"date\") ? true : undefined,\n                        }}\n                        className={classes.textfield_basic}\n                        onChange={handleChange_normalTextField}\n                    >{textField.selectItem}\n                    </TextField>\n                )\n            }\n        )\n\n    const ElementList_TextField_Basic = ElementListMaker_TextField(TextFieldList_Basic)\n    const ElementList_TextField_Team = ElementListMaker_TextField(TextFieldList_Team)\n    const ElementList_DateTextField_Project = ElementListMaker_TextField(TextFieldList_Timing)\n\n\n    // Function to build little TextField for Yearly Volume\n    const ElementListMaker_NumTextField = (Numbers: (number | string)[]) =>\n        Numbers.map(\n            function mapNumber(num: number | string, key: number) {\n                return (\n                    <TextField\n                        key={key}\n                        type=\"number\"\n                        name={key.toString()} //use name as index to position the number in list. used to be id but give it to Part element\n                        value={project.volume_list[key]}\n                        // name={`volume_${key.toString()}`}\n                        label={`Year ${(key + 1).toString()}`}\n                        // InputLabelProps={{\n                        //     shrink: true,\n                        // }}\n                        className={classes.textfield_small}\n                        // change value should goto project.vol with position index\n                        onChange={handleChange_volumeTextField}\n\n                    />\n                )\n            }\n        )\n\n    const ElementList_NumTextField_Volume = ElementListMaker_NumTextField(project.volume_list)\n\n\n    // Function to build special Textfield for single part (mainly handleChange logic is different)\n    const ElementListMaker_TextField_Part = (textFieldList_Part: TextFieldProps[], part_index: number) =>\n        textFieldList_Part.map(\n            function mapTextFieldList_Part(textField_Part: TextFieldProps, key: number) {\n                const propName: string = textField_Part.name\n                const targetPart: Part = project.part_list[part_index]\n                return (\n                    <TextField\n                        key={key}\n                        id={part_index.toString()}\n                        name={propName}\n                        value={targetPart[propName]}\n                        label={textField_Part.label}\n                        type={textField_Part.type}\n                        InputLabelProps={{\n                            shrink: (textField_Part.type === \"date\") ? true : undefined,\n                        }}\n                        className={classes.textfield_basic}\n                        onChange={handleChange_Part}\n                    />\n                )\n            }\n        )\n\n\n    // function to assemble Part Textfield\n    const ElementListMakerCombi_Part = (partList: Part[]) =>\n        partList.map(\n            function mapPartList(part: Part, key: number) {\n                return (\n                    <Fragment key={key}>\n                        <Grid item xs={1} className={classes.subtitle_part}>\n                            <Box component={\"h6\"} bgcolor=\"secondary.main\" color=\"primary.contrastText\" p={1}>\n                                Part {key + 1}\n                            </Box>\n                        </Grid>\n                        {ElementListMaker_TextField_Part(TextFieldList_Part, key)}\n                        {/*use key to indicate which part*/}\n                    </Fragment>\n                )\n            }\n        )\n\n    const ElementListCombi_Part = ElementListMakerCombi_Part(project.part_list)\n\n    // single number input for lifetime\n    const ButtonGroup_Lifetime =\n        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n            <Button onClick={handleClick_removeYear}>Year -</Button>\n            <Button onClick={handleClick_addYear}>Year +</Button>\n        </ButtonGroup>\n\n    // single number input for part\n    const ButtonGroup_Part =\n        <ButtonGroup size=\"small\" aria-label=\"small outlined button group\">\n            <Button onClick={handleClick_removePart}>Part -</Button>\n            <Button onClick={handleClick_addPart}>Part +</Button>\n        </ButtonGroup>\n\n// data change btw server\n    const url = `http://${document.domain}:${8080}`\n\n\n    const saveProject = () => {\n        //TODO check project id is not null\n\n        // send project to server with POST\n        const url_string = `${url}/project/new/info`\n        console.log(`[create project] at ${url_string}`)\n        axios({\n            url: url_string,\n            method: \"POST\",\n            params: project\n        }).then(response => {\n            //TODO give user a feedback\n            console.log(`[save project] response: ${response}`)\n        }).catch(err => {\n            console.log(`[save project] error: ${err}`)\n        })\n    }\n\n\n    const deleteProject = () => {\n        //TODO check project id is not null\n\n        // send project to server with POST\n        const url_string = `${url}/project/${project.project}/info`\n        console.log(`[delete project] at ${url_string}`)\n        axios({\n            url: url_string,\n            method: \"delete\",\n        }).then(response => {\n            //TODO give user a feedback\n            console.log(`[delete project] response: ${response.data}`)\n        }).catch(err => {\n            console.log(`[delete project] error: ${err}`)\n        })\n    }\n\n\n    const searchProject = (projectID: string) => {\n        //TODO check project id is not null\n\n        const url_string = `${url}/project/${projectID}/info`\n        console.log(`[search project] at ${url_string}`)\n        axios({\n            url: url_string,\n            method: \"get\",\n        }).then(response => {\n            //TODO give user a feedback\n            console.log(`[search project] response: ${JSON.stringify(response)}`)\n            set_project_with_response(response.data)\n        }).catch(err => {\n            console.log(`[search project] error: ${err}`)\n        })\n    }\n\n    const set_project_with_response = (data: {}) => {\n        // const new_project = Object.assign({}, data)\n        // for (let [key, value] of Object.entries(data)) {\n        //     if (value = null) {}\n        // }\n        setProject({\n            ...project,\n            ...data,\n        })\n    }\n\n\n    return (\n        <Fragment>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <Box component={\"h2\"} bgcolor=\"secondary.main\" color=\"primary.contrastText\" p={2}>\n                        Project Info\n                    </Box>\n                </Grid>\n\n                <form noValidate autoComplete=\"off\">\n                    <SearchProject searchProject={searchProject}/>\n                    <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}>\n                        Basic\n                    </Typography>\n                    {ElementList_TextField_Basic}\n                    <Divider className={classes.divider_basic}/>\n                    <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}>\n                        Timing\n                    </Typography>\n                    {ElementList_DateTextField_Project}\n                    <Divider className={classes.divider_basic}/>\n                    <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}>\n                        Team\n                    </Typography>\n                    {ElementList_TextField_Team}\n                    <Divider className={classes.divider_basic}/>\n                    {/*Volumes*/}\n                    <Grid item xs={12}>\n                        <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}\n                                    display={\"inline\"}>\n                            Volume\n                        </Typography>\n                        {ButtonGroup_Lifetime}\n                    </Grid>\n                    {ElementList_NumTextField_Volume}\n                    <Divider className={classes.divider_basic}/>\n                    {/*Parts*/}\n                    <Grid item xs={12}>\n                        <Typography className={classes.subtitle} variant=\"h6\" color={\"primary\"}\n                                    display={\"inline\"}>\n                            Part\n                        </Typography>\n                        {ButtonGroup_Part}\n                    </Grid>\n                    {ElementListCombi_Part}\n                    <Divider className={classes.divider_basic}/>\n                    <Grid container justify={\"center\"}>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<SaveIcon/>}\n                            onClick={saveProject}\n                        >\n                            Save Project\n                        </Button>\n\n                        <Button\n                            variant=\"contained\"\n                            color=\"inherit\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<DeleteIcon/>}\n                            onClick={deleteProject}\n                        >\n                            Delete Project\n                        </Button>\n                    </Grid>\n                </form>\n            </Grid>\n        </Fragment>\n    )\n}\n\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Webdatarocks from \"webdatarocks\";\nimport WebDataRocks from \"webdatarocks\";\n\nexport class Pivot extends React.Component<WebDataRocks.Params, any> {\n\t\n\twebdatarocks: WebDataRocks.Pivot | undefined\n\n\tcomponentDidMount() {\n\t\tthis.webdatarocks = new Webdatarocks({\n\t\t\t...this.props,\n\t\t\tcontainer: ReactDOM.findDOMNode(this)\n\t\t});\n\t}\n\t\n\tshouldComponentUpdate() {\n\t\treturn false;\n\t}\n\t\n\tcomponentWillUnmount() {\n\t\tif (this.webdatarocks) {\n\t\tthis.webdatarocks.dispose();\n\t\t}\n\t}\n\n\trender() {\n\t\treturn <div>Pivot</div>;\n\t}\n}\n\nexport default Pivot;","import React, {Fragment, ChangeEvent, useState} from 'react'\nimport axios from 'axios';\nimport {createStyles, Theme, makeStyles} from '@material-ui/core/styles';\nimport {\n    MenuItem,\n    TextField,\n    FormControl,\n    InputLabel,\n    Select,\n    Button,\n    Grid,\n    Box,\n    Input, Checkbox, ListItemText, FormHelperText\n} from \"@material-ui/core\";\nimport GetAppIcon from '@material-ui/icons/GetApp';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textfield_basic: {\n            margin: theme.spacing(3, 5),\n            width: 200,\n        },\n        divider_basic: {\n            margin: theme.spacing(1, 5),\n        },\n        subtitle: {\n            margin: theme.spacing(0, 3),\n        },\n        button: {\n            margin: theme.spacing(5, 5),\n        },\n        formControl: {\n            margin: theme.spacing(5, 5),\n            width: 200,\n        },\n    }),\n);\n\n\ntype SourceProps = {\n    project: string\n    vendor_available: string[]\n    vendor_selected: string\n    part_available: string[]\n    part_selected: string[]\n    file_selected: string\n}\n\nexport const SourcingDoc = () => {\n\n    const classes = useStyles();\n\n    const url: string = `http://${document.domain}:8080`\n\n    const initSource: SourceProps = {\n        project: \"\",\n        vendor_available: [],\n        vendor_selected: \"\",\n        part_selected: [],\n        part_available: [],\n        file_selected: \"\",\n    };\n\n    const [source, setSource] = useState(initSource)\n\n    const handleChangeFile = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const {value} = event.target\n        setSource({\n            ...initSource,\n            file_selected: value,\n        })\n    }\n\n    const handleProjectChange = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const {name, value} = event.target\n        setSource({\n            ...source,\n            [name]: value\n        })\n    }\n\n    const handleProjectBlur = () => {\n        if (source.file_selected === \"nomination letter\") {\n            fetchVendor()\n        } else {\n            fetchPart_Project()\n        }\n    }\n\n    const fetchVendor = () => {\n        const project = source.project.trim()\n        if (project.length > 10) {\n            const url_string: string = `${url}/project/${project}/vendors`\n            axios.get(url_string).then(res => {\n                setSource({\n                    ...source,\n                    vendor_available: res.data,\n                    vendor_selected: \"\",\n                    part_available: [],\n                    part_selected: [],\n                })\n                console.log(\"[fetch vendor] responsible data below: \")\n                console.log(res.data)\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n    }\n\n\n    function fetchPart_Project() {\n\n        const url_string: string = `${url}/project/${source.project}/parts`\n        // control project length\n        if (source.project.length > 10) {\n            axios.get(url_string).then(res => {\n                setSource({\n                    ...source,\n                    part_available: res.data,\n                    part_selected: [],\n                })\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n    }\n\n\n    function handleVendorSelect(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n        const vendor = event.target.value.trim()\n\n        const url_string: string = `${url}/project/${source.project}/vendor/${vendor}/parts`\n        axios.get(url_string).then(res => {\n            setSource({\n                ...source,\n                vendor_selected: vendor,\n                part_available: res.data,\n                part_selected: [],\n            })\n        }).catch(err => {\n            console.log(err)\n        })\n    }\n\n\n    const handleChangePart = (event: React.ChangeEvent<{ value: unknown }>) => {\n        setSource({\n            ...source,\n            part_selected: event.target.value as string[]\n        });\n    };\n\n    function fileDownload() {\n        let url_string: string = `${url}/docs`\n        axios({\n            url: url_string,\n            method: 'GET',\n            params: {\n                file: source.file_selected,\n                project: source.project,\n                vendor: source.vendor_selected,\n                part_list: source.part_selected,\n            }\n        }).then(\n            (res) => {\n                console.log(\"[download file] responsible below: \")\n                console.log(JSON.stringify(res.data))\n                const filename = res.data\n                if (filename) {\n                    const url_download = `${url}/downloads/${filename}`\n                    const link = document.createElement('a');\n                    link.href = url_download;\n                    document.body.appendChild(link);\n                    link.click();\n                    link.remove()\n                }\n            }\n        ).catch(err => {\n            console.log(err)\n        })\n    }\n\n\n    const SelectMaker = (options: string[]) =>\n        options.map(\n            (option: string, key: number) =>\n                <MenuItem key={key} value={option}>\n                    {option}\n                </MenuItem>\n        )\n\n\n    const option_file: string[] = [\n        \"risk evaluation\",\n        \"supplier selection\",\n        \"cost breakdown\",\n        \"nomination letter\",\n\n    ]\n\n\n    const selectOption_file = SelectMaker(option_file)\n    const selectOption_vendor = SelectMaker(source.vendor_available)\n\n    // menu style for tag multi selector\n    const ITEM_HEIGHT = 48;\n    const ITEM_PADDING_TOP = 8;\n    const MenuProps = {\n        PaperProps: {\n            style: {\n                maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,\n                width: 250,\n            },\n        },\n    };\n\n\n    return (\n        <Fragment>\n\n            <Grid item xs={12}>\n                <Box component={\"h2\"} bgcolor=\"secondary.main\" color=\"primary.contrastText\" p={2}>\n                    Sourcing Document Auto\n                </Box>\n                <Box component={\"h5\"} bgcolor=\"primary.main\" color=\"primary.contrastText\" p={1}>\n                    Nomination Roadmap Data updates over-night after you input data into it.\n                </Box>\n            </Grid>\n            <form autoComplete={\"off\"}>\n\n                <Grid item xs={12}>\n                    {/* file selection */}\n                    <TextField\n                        name=\"file_selected\"\n                        label=\"File Type\"\n                        className={classes.textfield_basic}\n                        select\n                        value={source.file_selected}\n                        onChange={handleChangeFile}>\n                        {selectOption_file}\n                    </TextField>\n\n                    {/* project input */}\n                    <TextField\n                        name={\"project\"}\n                        label={\"Project No.\"}\n                        className={classes.textfield_basic}\n                        value={source.project}\n                        onChange={handleProjectChange}\n                        onBlur={handleProjectBlur}>\n                        {selectOption_file}\n                    </TextField>\n                </Grid>\n\n                    {/* vendor selection */}\n                <Grid item xs={12}>\n                    <TextField\n                        label={\"Vendor\"}\n                        disabled={(source.file_selected !== \"nomination letter\")}\n                        className={classes.textfield_basic}\n                        select\n                        value={source.vendor_selected}\n                        onChange={handleVendorSelect}>\n                        {selectOption_vendor}\n                    </TextField>\n                </Grid>\n\n                <Grid item xs={12}>\n                    {/*part selection*/}\n                    <FormControl className={classes.formControl}>\n                        <InputLabel>Part</InputLabel>\n                        <Select\n                            multiple\n                            value={source.part_selected}\n                            onChange={handleChangePart}\n                            input={<Input/>}\n                            disabled={(source.file_selected === \"supplier selection\")}\n                            renderValue={selected => (selected as string[]).join(', ')}\n                            MenuProps={MenuProps}\n                        >\n                            {source.part_available.map(part => (\n                                <MenuItem key={part} value={part}>\n                                    <Checkbox checked={source.part_selected.indexOf(part) > -1}/>\n                                    <ListItemText primary={part}/>\n                                </MenuItem>\n                            ))}\n                        </Select>\n                        <FormHelperText>Default Select All</FormHelperText>\n                    </FormControl>\n                </Grid>\n\n                {/*Button*/}\n                <Grid item xs={12}>\n                    {/*  download btn */}\n                    <Button variant=\"contained\"\n                            color=\"secondary\"\n                            size=\"large\"\n                            className={classes.button}\n                            startIcon={<GetAppIcon/>}\n                            onClick={fileDownload}>\n                        Download\n                    </Button>\n                </Grid>\n\n                {/* helper show board */}\n                {/*<h3>project: {source.project}</h3>*/}\n                {/*<h3>vendor selected: {source.vendor_selected}</h3>*/}\n                {/*<h3>parts available: {source.part_available}</h3>*/}\n                {/*<h3>parts selected: {source.part_selected}</h3>*/}\n                {/*<h3>file: {source.file_selected}</h3>*/}\n\n\n            </form>\n        </Fragment>\n    )\n}\n\n","import React, {ChangeEvent, Fragment, useState} from 'react'\nimport {Grid, MenuItem, TextField, Typography} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport axios from 'axios';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textfield_large: {\n            margin: theme.spacing(1, 1),\n            width: 300,\n        },\n        textfield_small: {\n            margin: theme.spacing(1, 1),\n            width: 300,\n        },\n        button: {\n            margin: theme.spacing(5, 3),\n        },\n        title: {\n            margin: theme.spacing(1, 1),\n        },\n        table: {\n            minWidth: 300,\n            maxWidth: 500,\n        },\n    }),\n);\n\ntype ROW = string[]\n\ntype QS = {\n    category: string\n    keyword: string\n    result: {\n        fields: string[]\n        rows: ROW[]\n    }\n}\n\nconst initSearch: QS = {\n    category: \"Project\",\n    keyword: \"\",\n    result: {\n        fields: [],\n        rows: [],\n    },\n}\nexport const QuickSearch = () => {\n\n    const classes = useStyles();\n    const [search, setSearch] = useState(initSearch)\n\n\n    const optionCategory: string[] = [\n        \"Project\",\n        \"Vendor\",\n        \"Part Number\",\n    ]\n\n    const selectCategory = optionCategory.map(\n        (option: string, key: number) =>\n            <MenuItem key={key} value={option}>\n                {option}\n            </MenuItem>\n    )\n\n\n    const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const {name, value} = event.target\n        setSearch({\n            ...search,\n            [name]: value\n        })\n    }\n\n    //TODO check online if better type than KeyboardEvent<HTMLdivEvent>\n    const handleReturn = (event: any) => {\n        console.log(`Pressed keyCode ${event.key}`);\n        if (event.key === 'Enter') {\n            fetchResult()\n            event.preventDefault();\n        }\n    }\n\n\n    const fetchResult = () => {\n        const url: string = `http://${document.domain}:8080`\n        const url_string: string = `${url}/qs`\n        axios({\n            url: url_string,\n            method: 'GET',\n            params: {\n                category: search.category,\n                keyword: search.keyword,\n            }\n        }).then(\n            (res) => {\n                console.log(\"[quick search] responsible below: \")\n                console.log(JSON.stringify(res.data))\n                // guard in case result in None\n                if (res.data) {\n                    setSearch({\n                        ...search,\n                        result: res.data,\n                    })\n                }\n            }).catch(err => {\n            console.log(err)\n        })\n    }\n\n    const {fields, rows} = search.result\n\n    const tableHead = fields.map(\n        (field: string, key: number) => <TableCell align=\"left\" key={key}>{field}</TableCell>\n    )\n\n    const tableBody = rows.map((row, row_id) => (\n        <TableRow key={row_id}>\n            {row.map(\n                (cell: string, cell_id: number) => (\n                    <TableCell component=\"th\" scope=\"row\" key={cell_id}>{cell}</TableCell>\n                )\n            )}\n        </TableRow>\n    ))\n\n\n    return (\n        <Fragment>\n            <Grid container>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} variant=\"h4\" color={\"textPrimary\"}>\n                        Quick Search\n                    </Typography>\n                </Grid>\n                <Grid item xs={12}>\n                    <Typography className={classes.title} variant=\"subtitle2\" color={\"textPrimary\"}>\n                        Support Fuzzy Search. Project/Vendor ID is auto detected if correct.<br/>\n                        SPACE will not be trimmed so that you can exclude ACED from ACE by input ACE[SPACE].\n\n                    </Typography>\n                </Grid>\n                <Grid item>\n                    <TextField\n                        name=\"category\"\n                        value={search.category}\n                        label=\"Type\"\n                        select\n                        className={classes.textfield_small}\n                        onChange={handleChange}\n                    >{selectCategory}</TextField>\n                </Grid>\n\n\n                <Grid item xs={9}>\n                    <TextField\n                        name=\"keyword\"\n                        value={search.keyword}\n                        label=\"Keyword\"\n                        className={classes.textfield_large}\n                        onChange={handleChange}\n                        onKeyPress={handleReturn}\n                    />\n                </Grid>\n            </Grid>\n\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            {tableHead}\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {tableBody}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </Fragment>\n    )\n}\n\n\n","import React, {Fragment} from 'react'\nimport {\n    VictoryArea,\n    VictoryChart,\n    VictoryLine,\n    VictoryTheme,\n    VictoryZoomContainer,\n    VictoryLabel,\n    VictoryLegend\n} from 'victory';\n\ntype Capacity = {\n    interval: { begin: Date, end: Date },\n    capacity: number\n}\n\ntype Demand = {\n    date: Date[], qty: number[]\n}\n\ntype Point = { x: Date, y: number }\n\nexport interface CapacityChartProps {\n    capacities: { apn: Capacity[], nl: Capacity[], tool: Capacity[] }\n    demand: Demand\n}\n\n\nexport const CapacityChart = (props: { data: CapacityChartProps }) => {\n\n\n    const demandDataMaker = (demand: Demand) => demand.qty.map(\n        (_: number, key: number) => {\n            return {\"x\": new Date(demand.date[key]), \"y\": demand.qty[key]}\n        }\n    )\n\n    const capacityDataMaker = (capacities: Capacity[]) => {\n        const points: Point[] = []\n        capacities.map(\n            (obj) =>\n                points.push(\n                    {\n                        x: new Date(obj.interval.begin),\n                        y: obj.capacity\n                    }, {\n                        x: new Date(obj.interval.end),\n                        y: obj.capacity\n                    })\n        )\n        return points\n    }\n\n\n    return (\n        <Fragment>\n            <VictoryChart\n                scale={{x: \"time\"}}\n                theme={VictoryTheme.material}\n                height={300} width={1000}\n                animate={{\n                    duration: 800,\n                }}\n                containerComponent={\n                    <VictoryZoomContainer/>\n                }\n            >\n                <VictoryArea data={demandDataMaker(props.data.demand)} style={{data: {fill: \"grey\", opacity: 0.3}}}/>\n                <VictoryLine style={{data: {stroke: \"blue\"}}} data={capacityDataMaker(props.data.capacities.apn)}/>\n                <VictoryLine style={{data: {stroke: \"green\"}}} data={capacityDataMaker(props.data.capacities.nl)}/>\n                <VictoryLine style={{data: {stroke: \"red\"}}} data={capacityDataMaker(props.data.capacities.tool)}/>\n                <VictoryLegend x={800} y={50}\n                               standalone={true}\n                               orientation=\"horizontal\"\n                               data={[\n                                   {name: \"nl\", symbol: {fill: \"green\"}},\n                                   {name: \"apn\", symbol: {fill: \"blue\"}},\n                                   {name: \"tool\", symbol: {fill: \"red\"}}\n                               ]}/>\n            </VictoryChart>\n        </Fragment>\n    )\n}","import React, {ChangeEvent, FormEvent, Fragment, useState} from 'react'\nimport {Box, Grid, MenuItem, TextField} from \"@material-ui/core\";\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport axios from 'axios';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport {CapacityChart, CapacityChartProps} from \"./CapacityChart\";\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        textfield_basic: {\n            margin: theme.spacing(1, 8),\n            width: 200,\n        },\n        button: {\n            margin: theme.spacing(5, 3),\n        },\n        title: {\n            margin: theme.spacing(1, 1),\n        },\n        table: {\n            minWidth: 200,\n            maxWidth: 500,\n        },\n    }),\n);\n\ntype SearchProps = {\n    part: string\n    vendor_available: string[]\n    vendor_selected: string\n}\n\n\nexport const LogisticsDashboard = () => {\n\n    const classes = useStyles();\n\n    const url: string = `http://${document.domain}:8080`\n\n    const initSearch: SearchProps = {\n        part: \"\",\n        vendor_available: [],\n        vendor_selected: \"\",\n    }\n\n    const initDelivery: CapacityChartProps = {\n        capacities: {nl: [], apn: [], tool: []},\n        demand: {date: [], qty: []},\n    }\n\n    const [search, setSearch] = useState(initSearch)\n    const [nrm, setNrm] = useState([])\n    const [delivery, setDelivery] = useState(initDelivery)\n\n\n    const handlePartChange = (event: ChangeEvent<HTMLInputElement>) => {\n        const part = event.target.value\n        setSearch({\n            ...initSearch,\n            part: part,\n        })\n    }\n\n    // handleSubmit steps\n    // get Nomination Roadmap information\n    const handleSubmit = (event: FormEvent<HTMLFormElement>) => {\n        event.preventDefault()\n        const part = search.part.trim()\n        getNRMData(part)\n        updateVendorAvailable(part)\n    }\n\n    const getNRMData = (part: string) => {\n        const url_string: string = `${url}/logistics/part/${part}/nrm_info`\n        axios.get(url_string).then(res => {\n            setNrm(res.data)\n        }).catch(err => console.log(err))\n    }\n\n    // update vendor available to axios result\n    // update vendor selected to first of axios result\n    // update Delivery to vendor selected\n    const updateVendorAvailable = (part: string) => {\n        if (part.length > 9) {\n            const url_string: string = `${url}/logistics/part/${part}/vendors`\n            axios.get(url_string).then(res => {\n                const rc = res.data\n                if (rc) {\n                    const first_vendor = rc[0]\n                    setSearch({\n                        ...search,\n                        vendor_available: rc,\n                        vendor_selected: first_vendor\n                    })\n                    updateDelivery(part, first_vendor)\n                } else {\n                    setDelivery(initDelivery)\n                }\n            }).catch(err => console.log(err))\n        }\n    }\n\n    // update vendor selected\n    // update Delivery Chart\n    const handleSelectVendor = (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n        const vendor = event.target.value\n        setSearch({\n            ...search,\n            vendor_selected: vendor,\n        })\n        updateDelivery(search.part, vendor)\n    }\n\n    const updateDelivery = (part: string, vendor: string) => {\n        const url_string: string = `${url}/logistics/part/${part}/vendor/${vendor}/capacity`\n        if (part.length > 9 && vendor) {\n            axios.get(url_string).then(res => {\n                const rc: CapacityChartProps = res.data\n                console.log(rc)\n                if (rc) {\n                    setDelivery(rc)\n                } else {\n                    setDelivery(initDelivery)\n                }\n            })\n        }\n    }\n\n\n    const VendorInfoMaker = (vendor_list: any) =>\n        vendor_list.map((vendor: any, key: number) => {\n            return (\n                <Fragment key={key}>\n                    <h3>{vendor.vendor}: {vendor.vendor_name}</h3>\n                    <TableContainer component={Paper}>\n                        <Table className={classes.table} aria-label=\"simple table\">\n                            <TableHead>\n                                <TableRow>\n                                    <TableCell>Fiscal Year</TableCell>\n                                    <TableCell align=\"right\">Year Volume in Kpcs</TableCell>\n                                    <TableCell align=\"right\">Week Max Capacity in Kpcs</TableCell>\n                                </TableRow>\n                            </TableHead>\n                            <TableBody>\n                                {vendor.volumes.map((volume: { year: number; year_volume: number; week_capacity: number; }, key: number) => (\n                                    <TableRow key={key}>\n                                        <TableCell component=\"th\" scope=\"row\">\n                                            {volume.year}\n                                        </TableCell>\n                                        <TableCell align=\"right\">{(volume.year_volume / 1000).toFixed(0)}</TableCell>\n                                        <TableCell align=\"right\">{(volume.week_capacity / 1000).toFixed(1)}</TableCell>\n                                    </TableRow>\n                                ))}\n                            </TableBody>\n                        </Table>\n                    </TableContainer>\n                </Fragment>\n            )\n        })\n\n\n    const nrmProjectInfo = nrm.map((project: any, key: number) => {\n        return (\n            <Fragment key={key}>\n                <h2>{project.project}: {project.project_name}</h2>\n                {VendorInfoMaker(project.vendor_list)}\n            </Fragment>\n        )\n    })\n\n\n    function handleToolSelect(event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) {\n\n    }\n\n    const optionMaker = (options: string[]) =>\n        options.map(\n            (option: string, key: number) =>\n                <MenuItem key={key} value={option}>\n                    {option}\n                </MenuItem>\n        )\n\n    const optionVendors = optionMaker(search.vendor_available)\n    // const selectOption_tool = optionMaker(search.tool_available)\n\n\n    return (\n        <Fragment>\n            <Grid item xs={12}>\n                <Box component={\"h2\"} bgcolor=\"secondary.main\" color=\"primary.contrastText\" p={2}>\n                    Logistics Dashboard\n                </Box>\n            </Grid>\n            <form autoComplete={\"off\"} onSubmit={handleSubmit}>\n\n                {/* part input */}\n                <Grid item>\n                    {/* file selection */}\n                    <TextField\n                        name=\"part\"\n                        label={\"Part Number\"}\n                        className={classes.textfield_basic}\n                        value={search.part}\n                        onChange={handlePartChange}>\n                        {search.part}\n                    </TextField>\n\n                    {/* vendor selection */}\n                    <TextField\n                        label={\"Vendor\"}\n                        className={classes.textfield_basic}\n                        select\n                        value={search.vendor_selected}\n                        onChange={handleSelectVendor}>\n                        {optionVendors}\n                    </TextField>\n                </Grid>\n\n                {/*Delivery: demand vs capacity*/}\n                <Grid item>\n                    <CapacityChart data={delivery}/>\n                </Grid>\n\n                {/*nomination roadmap data*/}\n                <Grid>\n                    {nrmProjectInfo}\n                </Grid>\n\n\n                {/* tool selection */}\n                {/*<Grid item xs={12}>*/}\n                {/*    <TextField*/}\n                {/*        label={\"Tooling\"}*/}\n                {/*        className={classes.textfield_basic}*/}\n                {/*        select*/}\n                {/*        value={search.tool_selected}*/}\n                {/*        onChange={handleToolSelect}>*/}\n                {/*        {selectOption_tool}*/}\n                {/*    </TextField>*/}\n                {/*</Grid>*/}\n\n            </form>\n        </Fragment>\n    )\n}\n","import React, {ReactElement} from \"react\";\nimport {RouteComponentProps} from 'react-router-dom'\nimport {ProjectInput} from \"./components/projectSingle/ProjectInput\";\nimport {ProjectReport} from \"./components/projectReport/ProjectReport\";\nimport {SourcingDoc} from \"./components/SourcingDoc\";\nimport {About} from \"./components/About\";\nimport {QuickSearch} from \"./components/QuickSearch\";\nimport DescriptionIcon from '@material-ui/icons/Description';\nimport PlayCircleOutlineIcon from '@material-ui/icons/PlayCircleOutline';\nimport EqualizerIcon from '@material-ui/icons/Equalizer';\nimport ListIcon from '@material-ui/icons/List';\nimport SearchIcon from '@material-ui/icons/Search';\nimport DashboardIcon from '@material-ui/icons/Dashboard';\nimport AddCircle from \"@material-ui/icons/Mail\";\nimport {LogisticsDashboard} from \"./components/logisticsDashboard/LogisticsDashboard\";\nimport {Tutorial} from \"./components/Tutorial\";\n\nexport type page = {\n    name: string\n    path: string\n    icon: ReactElement\n    component: (props: RouteComponentProps) => ReactElement\n}\n\nexport const pages: page[] = [\n    {\n        path: `/search`,\n        name: 'Quick Search',\n        icon: <SearchIcon/>,\n        component: QuickSearch\n    },\n    {\n        path: '/sourcing_doc',\n        name: \"Sourcing Document\",\n        icon: <DescriptionIcon/>,\n        component: SourcingDoc\n    },\n    {\n        path: `/logistics_dashboard`,\n        name: 'Logistics Dashboard',\n        icon: <DashboardIcon/>,\n        component: LogisticsDashboard\n    },\n    {\n        path: `/project`,\n        name: 'Project Info',\n        icon: <AddCircle/>,\n        component: ProjectInput\n    },\n    {\n        path: '/project_report',\n        name: 'Project Report',\n        icon: <EqualizerIcon/>,\n        component: ProjectReport\n    },\n    // {\n    //     path: '/upload',\n    //     name: \"Data Upload\",\n    //     icon: <PublishIcon/>,\n    //     component: Uploader\n    // },\n    {\n        path: '/tutorial',\n        name: \"Tutorial\",\n        icon: <PlayCircleOutlineIcon/>,\n        component: Tutorial\n    },\n    {\n        path: `/`,\n        name: 'About App',\n        icon: <ListIcon/>,\n        component: About\n    },\n]\n","import React from 'react'\n\nimport {RouteComponentProps} from 'react-router-dom'\nimport * as WebDataRocks from \"./webdatarocks/webdatarocks.react\";\nimport \"webdatarocks/webdatarocks.css\";\n\ninterface ProjectReportProps extends RouteComponentProps {\n}\n\n\nexport const ProjectReport = (props: ProjectReportProps) => {\n\n    // WebDataRock\n    const ref: React.RefObject<WebDataRocks.Pivot> = React.useRef<WebDataRocks.Pivot>(null);\n\n    const onReportComplete = () => {\n        if (ref.current && ref.current.webdatarocks) {\n            ref.current.webdatarocks.off(\"reportcomplete\");\n            console.log(ref.current.webdatarocks);\n        }\n    }\n\n    const url = `http://${document.domain}:${8080}/downloads/report.json`\n\n\n    return (\n        <div className=\"App\">\n            <WebDataRocks.Pivot ref={ref} toolbar={true} width=\"100%\" reportcomplete={() => onReportComplete()}\n                                report={url}></WebDataRocks.Pivot>\n        </div>\n    )\n}","import React, {SyntheticEvent} from 'react'\nimport {Typography, Link} from \"@material-ui/core\";\n\nexport const Tutorial = () => {\n\n    const preventDefault = (event: SyntheticEvent) => event.preventDefault()\n    const url1 = `http://${document.domain}:${8080}/downloads/tutorial_sourcing_doc_auto.wmv`\n\n    return (\n        <Typography>\n            <Link href={url1} >\n                Sourcing Doc Auto Video Tutorial\n            </Link>\n        </Typography>\n    )\n}","import React from 'react'\nimport {Grid, Link} from \"@material-ui/core\";\n\nexport const About = () => {\n    return (\n        <Grid container>\n            <Grid item xs={12}>\n                <p>This Web App is just demo. IE11 is supported. Win10 built-in browser Edge is faster.</p>\n            </Grid>\n            <Grid item>\n                <p> {\"If you have any new idea, suggestion or bug report, email to \"}\n                    <Link href=\"mailto: ming.chen@hella.com\">\n                        ming.chen@hella.com.\n                    </Link>\n                </p>\n            </Grid>\n        </Grid>\n    )\n}","import React from 'react'\nimport {Switch, Route, BrowserRouter as Router} from \"react-router-dom\";\nimport {page, pages} from \"../routes\"\nimport {createStyles, makeStyles, Theme} from \"@material-ui/core/styles\";\nimport {Grid, Paper} from \"@material-ui/core\";\nimport {Container} from '@material-ui/core';\n\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n            appBarSpacer: theme.mixins.toolbar,\n            content: {\n                flexGrow: 1,\n                height: '100vh',\n                overflow: 'auto',\n            },\n            container: {\n                paddingTop: theme.spacing(4),\n                paddingBottom: theme.spacing(4),\n            },\n            paper: {\n                padding: theme.spacing(2),\n                display: 'flex',\n                overflow: 'auto',\n                flexDirection: 'column',\n            },\n        },\n    ));\n\n\nconst switchPages = pages.map(\n    (item: page, key: number) =>\n        <Route exact\n            path={item.path}\n            component={item.component}\n            key={key}\n        />\n)\n\n\nexport const Main = () => {\n    const classes = useStyles()\n\n    return (\n        <main className={classes.content}>\n            <div className={classes.appBarSpacer}/>\n            <Container maxWidth=\"lg\" className={classes.container}>\n                <Grid container spacing={3}>\n                    <Grid item xs={12}>\n                        <Paper className={classes.paper}>\n                            <Router>\n                                <Switch>\n                                    {switchPages}\n                                </Switch>\n                            </Router>\n                        </Paper>\n                    </Grid>\n                </Grid>\n            </Container>\n        </main>\n    )\n}","import AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\nimport React from \"react\";\n\n\nexport const Header = (props: any) => {\n    const classes = props.className\n\n    return (\n        <AppBar position=\"fixed\" className={classes.appBar}>\n            <Toolbar>\n                <Typography variant=\"h6\" color=\"inherit\" >\n                    Purchasing App DEMO\n                </Typography>\n            </Toolbar>\n        </AppBar>\n    )\n}","import List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemIcon from \"@material-ui/core/ListItemIcon\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nimport Divider from \"@material-ui/core/Divider\";\nimport Drawer from \"@material-ui/core/Drawer\";\nimport React from \"react\";\nimport {page, pages} from \"../routes\"\n\n\nconst itemList = pages.map(\n    function mapPage(item: page, key: number) {\n        return (\n            <ListItem button key={key} component=\"a\" href={item.path}>\n                <ListItemIcon>{item.icon}</ListItemIcon>\n                <ListItemText primary={item.name}/>\n            </ListItem>\n        )\n    }\n)\n\n\nexport const Sidebar = (props: any) => {\n    const classes = props.className\n\n    return (\n        <Drawer\n            className={classes.drawer}\n            variant=\"permanent\"\n            classes={{\n                paper: classes.drawerPaper,\n            }}\n        >\n            <div className={classes.toolbar}/>\n            <List>\n                {itemList}\n            </List>\n            <Divider/>\n        </Drawer>\n    )\n}","import React from 'react'\nimport {Main} from './components/Main'\nimport {Header} from \"./components/Header\";\nimport {Sidebar} from './components/Sidebar'\n\nimport {makeStyles, createStyles} from '@material-ui/core/styles';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\n\nconst drawerWidth = 240;\n\nconst useStyles = makeStyles((theme: any) =>\n    createStyles({\n        root: {\n            display: 'flex',\n        },\n        appBar: {\n            zIndex: theme.zIndex.drawer + 1,\n        },\n        drawer: {\n            width: drawerWidth,\n            flexShrink: 0,\n        },\n        drawerPaper: {\n            width: drawerWidth,\n        },\n        content: {\n            flexGrow: 1,\n            padding: theme.spacing(3),\n        },\n        toolbar: theme.mixins.toolbar,\n    }),\n);\n\n\nexport const App = () => {\n\n\n    const classes = useStyles();\n    return (\n\n        <div className={classes.root}>\n            <CssBaseline/>\n            <Header className={classes}/>\n            <Sidebar className={classes}/>\n            <Main/>\n        </div>\n    );\n}\n","import \"core-js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n"],"sourceRoot":""}